# -*- coding: utf-8 -*-
"""soundfreq.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s3BsVxC8H4rYC0GEVPgBT_iF9anVhlHv
"""

!pip install matplotlib numpy scipy soundfile --quiet

import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import rfft, rfftfreq
import soundfile as sf
import IPython.display as ipd

def generate_sine_wave(freq=440.0, duration=2.0, sr=44100):
    """Generate a sine wave signal of given frequency and duration."""
    t = np.linspace(0, duration, int(sr * duration), endpoint=False)
    signal = 0.5 * np.sin(2 * np.pi * freq * t)
    return signal, sr

def plot_spectrum(signal, sr, max_freq=5000):
    """Compute and plot the frequency spectrum with better visibility."""
    fft_vals = np.abs(rfft(signal))
    freqs = rfftfreq(len(signal), 1 / sr)

    plt.figure(figsize=(10, 5))
    plt.semilogy(freqs, fft_vals, color='mediumslateblue')  # log scale for visibility
    plt.title(" Frequency Spectrum of Audio Signal (Log Scale)")
    plt.xlabel("Frequency (Hz)")
    plt.ylabel("Magnitude (log scale)")
    plt.xlim(0, max_freq)
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# Generate tone
signal, sr = generate_sine_wave(880, 2.0)
sf.write("tone.wav", signal, sr)
ipd.Audio("tone.wav")

# Plot spectrum
plot_spectrum(signal, sr)

